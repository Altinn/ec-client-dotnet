//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.Serialization;

namespace EC_Endpoint_Client.Service_References.KeyManagement {
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="AltinnFault", Namespace="http://www.altinn.no/services/common/fault/2009/10")]
    [Serializable()]
    public partial class AltinnFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string AltinnErrorMessageField;
        
        [OptionalField()]
        private string AltinnExtendedErrorMessageField;
        
        [OptionalField()]
        private string AltinnLocalizedErrorMessageField;
        
        [OptionalField()]
        private string ErrorGuidField;
        
        [OptionalField()]
        private int ErrorIDField;
        
        [OptionalField()]
        private string UserGuidField;
        
        [OptionalField()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string AltinnErrorMessage {
            get {
                return this.AltinnErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.AltinnErrorMessageField, value) != true)) {
                    this.AltinnErrorMessageField = value;
                    this.RaisePropertyChanged("AltinnErrorMessage");
                }
            }
        }
        
        [DataMember()]
        public string AltinnExtendedErrorMessage {
            get {
                return this.AltinnExtendedErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.AltinnExtendedErrorMessageField, value) != true)) {
                    this.AltinnExtendedErrorMessageField = value;
                    this.RaisePropertyChanged("AltinnExtendedErrorMessage");
                }
            }
        }
        
        [DataMember()]
        public string AltinnLocalizedErrorMessage {
            get {
                return this.AltinnLocalizedErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.AltinnLocalizedErrorMessageField, value) != true)) {
                    this.AltinnLocalizedErrorMessageField = value;
                    this.RaisePropertyChanged("AltinnLocalizedErrorMessage");
                }
            }
        }
        
        [DataMember()]
        public string ErrorGuid {
            get {
                return this.ErrorGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorGuidField, value) != true)) {
                    this.ErrorGuidField = value;
                    this.RaisePropertyChanged("ErrorGuid");
                }
            }
        }
        
        [DataMember()]
        public int ErrorID {
            get {
                return this.ErrorIDField;
            }
            set {
                if ((this.ErrorIDField.Equals(value) != true)) {
                    this.ErrorIDField = value;
                    this.RaisePropertyChanged("ErrorID");
                }
            }
        }
        
        [DataMember()]
        public string UserGuid {
            get {
                return this.UserGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.UserGuidField, value) != true)) {
                    this.UserGuidField = value;
                    this.RaisePropertyChanged("UserGuid");
                }
            }
        }
        
        [DataMember()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [CollectionDataContract(Name="CertificateBEList", Namespace="http://schemas.altinn.no/services/Archive/KeyManagement/2010/10", ItemName="CertificateBE")]
    [Serializable()]
    public class CertificateBEList : System.Collections.Generic.List<CertificateBE> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="CertificateBE", Namespace="http://schemas.altinn.no/services/Archive/KeyManagement/2010/10")]
    [Serializable()]
    public partial class CertificateBE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string CertificateField;
        
        [OptionalField()]
        private int CertificateIdField;
        
        [OptionalField()]
        private int ServiceOwnerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Certificate {
            get {
                return this.CertificateField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateField, value) != true)) {
                    this.CertificateField = value;
                    this.RaisePropertyChanged("Certificate");
                }
            }
        }
        
        [DataMember()]
        public int CertificateId {
            get {
                return this.CertificateIdField;
            }
            set {
                if ((this.CertificateIdField.Equals(value) != true)) {
                    this.CertificateIdField = value;
                    this.RaisePropertyChanged("CertificateId");
                }
            }
        }
        
        [DataMember()]
        public int ServiceOwnerId {
            get {
                return this.ServiceOwnerIdField;
            }
            set {
                if ((this.ServiceOwnerIdField.Equals(value) != true)) {
                    this.ServiceOwnerIdField = value;
                    this.RaisePropertyChanged("ServiceOwnerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.altinn.no/services/Archive/KeyManagement/2010/10", ConfigurationName="KeyManagement.IKeyManagementExternalEC")]
    public interface IKeyManagementExternalEC {
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://www.altinn.no/services/2009/10) of message TestRequest does not match the default value (http://www.altinn.no/services/Archive/KeyManagement/2010/10)
        [System.ServiceModel.OperationContractAttribute(Action="http://www.altinn.no/services/2009/10/IAltinnContractBase/Test", ReplyAction="http://www.altinn.no/services/2009/10/IAltinnContractBase/TestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(AltinnFault), Action="http://www.altinn.no/services/2009/10/IAltinnContractBase/TestAltinnFaultFault", Name="AltinnFault", Namespace="http://www.altinn.no/services/common/fault/2009/10")]
        TestResponse Test(TestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.altinn.no/services/2009/10/IAltinnContractBase/Test", ReplyAction="http://www.altinn.no/services/2009/10/IAltinnContractBase/TestResponse")]
        System.Threading.Tasks.Task<TestResponse> TestAsync(TestRequest request);
        
        // CODEGEN: Generating message contract since element name userName from namespace http://www.altinn.no/services/Archive/KeyManagement/2010/10 is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://www.altinn.no/services/Archive/KeyManagement/2010/10/IKeyManagementExterna" +
            "lEC/GetCertificatesEC", ReplyAction="http://www.altinn.no/services/Archive/KeyManagement/2010/10/IKeyManagementExterna" +
            "lEC/GetCertificatesECResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(AltinnFault), Action="http://www.altinn.no/services/Archive/KeyManagement/2010/10/IKeyManagementExterna" +
            "lEC/GetCertificatesECAltinnFaultFault", Name="AltinnFault", Namespace="http://www.altinn.no/services/common/fault/2009/10")]
        GetCertificatesECResponse GetCertificatesEC(GetCertificatesECRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.altinn.no/services/Archive/KeyManagement/2010/10/IKeyManagementExterna" +
            "lEC/GetCertificatesEC", ReplyAction="http://www.altinn.no/services/Archive/KeyManagement/2010/10/IKeyManagementExterna" +
            "lEC/GetCertificatesECResponse")]
        System.Threading.Tasks.Task<GetCertificatesECResponse> GetCertificatesECAsync(GetCertificatesECRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Test", WrapperNamespace="http://www.altinn.no/services/2009/10", IsWrapped=true)]
    public partial class TestRequest {
        
        public TestRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TestResponse", WrapperNamespace="http://www.altinn.no/services/2009/10", IsWrapped=true)]
    public partial class TestResponse {
        
        public TestResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetCertificatesECRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetCertificatesEC", Namespace="http://www.altinn.no/services/Archive/KeyManagement/2010/10", Order=0)]
        public GetCertificatesECRequestBody Body;
        
        public GetCertificatesECRequest() {
        }
        
        public GetCertificatesECRequest(GetCertificatesECRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [DataContract(Namespace="http://www.altinn.no/services/Archive/KeyManagement/2010/10")]
    public partial class GetCertificatesECRequestBody {
        
        [DataMember(EmitDefaultValue=false, Order=0)]
        public string userName;
        
        [DataMember(EmitDefaultValue=false, Order=1)]
        public string password;
        
        [DataMember(EmitDefaultValue=false, Order=2)]
        public string externalServiceCode;
        
        [DataMember(Order=3)]
        public int externalServiceEditionCode;
        
        public GetCertificatesECRequestBody() {
        }
        
        public GetCertificatesECRequestBody(string userName, string password, string externalServiceCode, int externalServiceEditionCode) {
            this.userName = userName;
            this.password = password;
            this.externalServiceCode = externalServiceCode;
            this.externalServiceEditionCode = externalServiceEditionCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetCertificatesECResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetCertificatesECResponse", Namespace="http://www.altinn.no/services/Archive/KeyManagement/2010/10", Order=0)]
        public GetCertificatesECResponseBody Body;
        
        public GetCertificatesECResponse() {
        }
        
        public GetCertificatesECResponse(GetCertificatesECResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [DataContract(Namespace="http://www.altinn.no/services/Archive/KeyManagement/2010/10")]
    public partial class GetCertificatesECResponseBody {
        
        [DataMember(Order=0)]
        public CertificateBEList GetCertificatesECResult;
        
        public GetCertificatesECResponseBody() {
        }
        
        public GetCertificatesECResponseBody(CertificateBEList GetCertificatesECResult) {
            this.GetCertificatesECResult = GetCertificatesECResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKeyManagementExternalECChannel : IKeyManagementExternalEC, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KeyManagementExternalECClient : System.ServiceModel.ClientBase<IKeyManagementExternalEC>, IKeyManagementExternalEC {
        
        public KeyManagementExternalECClient() {
        }
        
        public KeyManagementExternalECClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KeyManagementExternalECClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KeyManagementExternalECClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KeyManagementExternalECClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestResponse IKeyManagementExternalEC.Test(TestRequest request) {
            return base.Channel.Test(request);
        }
        
        public void Test() {
            TestRequest inValue = new TestRequest();
            TestResponse retVal = ((IKeyManagementExternalEC)(this)).Test(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TestResponse> IKeyManagementExternalEC.TestAsync(TestRequest request) {
            return base.Channel.TestAsync(request);
        }
        
        public System.Threading.Tasks.Task<TestResponse> TestAsync() {
            TestRequest inValue = new TestRequest();
            return ((IKeyManagementExternalEC)(this)).TestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetCertificatesECResponse IKeyManagementExternalEC.GetCertificatesEC(GetCertificatesECRequest request) {
            return base.Channel.GetCertificatesEC(request);
        }
        
        public CertificateBEList GetCertificatesEC(string userName, string password, string externalServiceCode, int externalServiceEditionCode) {
            GetCertificatesECRequest inValue = new GetCertificatesECRequest();
            inValue.Body = new GetCertificatesECRequestBody();
            inValue.Body.userName = userName;
            inValue.Body.password = password;
            inValue.Body.externalServiceCode = externalServiceCode;
            inValue.Body.externalServiceEditionCode = externalServiceEditionCode;
            GetCertificatesECResponse retVal = ((IKeyManagementExternalEC)(this)).GetCertificatesEC(inValue);
            return retVal.Body.GetCertificatesECResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<GetCertificatesECResponse> IKeyManagementExternalEC.GetCertificatesECAsync(GetCertificatesECRequest request) {
            return base.Channel.GetCertificatesECAsync(request);
        }
        
        public System.Threading.Tasks.Task<GetCertificatesECResponse> GetCertificatesECAsync(string userName, string password, string externalServiceCode, int externalServiceEditionCode) {
            GetCertificatesECRequest inValue = new GetCertificatesECRequest();
            inValue.Body = new GetCertificatesECRequestBody();
            inValue.Body.userName = userName;
            inValue.Body.password = password;
            inValue.Body.externalServiceCode = externalServiceCode;
            inValue.Body.externalServiceEditionCode = externalServiceEditionCode;
            return ((IKeyManagementExternalEC)(this)).GetCertificatesECAsync(inValue);
        }
    }
}
